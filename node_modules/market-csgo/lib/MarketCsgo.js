"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const DefaultOptions_1 = require("./DefaultOptions");
const axios_1 = tslib_1.__importDefault(require("axios"));
const axios_rate_limit_1 = tslib_1.__importDefault(require("axios-rate-limit"));
const ApiBaseCanNotBeEmptyError_1 = require("./errors/ApiBaseCanNotBeEmptyError");
const ApiKeyCanNotBeEmptyError_1 = require("./errors/ApiKeyCanNotBeEmptyError");
const Endpoints_1 = require("./declarations/Endpoints");
const UnexceptedError_1 = require("./errors/UnexceptedError");
const Utils_1 = require("./Utils");
class MarketCsgo {
    constructor(options) {
        this.Options = DefaultOptions_1.DefaultOptions;
        this.RateLimitedAxios = axios_1.default.create();
        this.UnlimitedAxios = axios_1.default.create();
        this.Utils = Utils_1.Utils;
        this.SetOptionsAndReinitialize(options);
    }
    SetOptionsAndReinitialize(options) {
        this.Options = Object.assign({}, DefaultOptions_1.DefaultOptions, options);
        this.RateLimitedAxios = this.CreateRateLimitedAxios();
        this.UnlimitedAxios = this.CreateUnlimitedAxios();
    }
    CreateRateLimitedAxios() {
        const axiosInstance = axios_1.default.create({
            baseURL: this.Options.ApiBase,
            timeout: 10000
        });
        return axios_rate_limit_1.default(axiosInstance, {
            maxRequests: this.Options.RateLimitPerSecond,
            perMilliseconds: 1000
        });
    }
    CreateUnlimitedAxios() {
        return axios_1.default.create({
            baseURL: this.Options.ApiBase,
            timeout: 120000
        });
    }
    CallAxios(endpointUrl, params, rateLimited = true) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.CheckErrors();
            const endpoint = this.ConfigureEndpoint(endpointUrl, params);
            const selectedAxios = rateLimited ? this.RateLimitedAxios : this.UnlimitedAxios;
            try {
                const response = yield selectedAxios.get(endpoint);
                return response.data;
            }
            catch (e) {
                throw new UnexceptedError_1.UnexceptedError(e.message);
            }
        });
    }
    CheckErrors() {
        if (this.Options.ApiBase === '') {
            throw new ApiBaseCanNotBeEmptyError_1.ApiBaseCanNotBeEmptyError();
        }
        else if (this.Options.ApiKey === '') {
            throw new ApiKeyCanNotBeEmptyError_1.ApiKeyCanNotBeEmptyError();
        }
    }
    ConfigureEndpoint(endpoint, params) {
        for (let [key, value] of Object.entries(params)) {
            if (typeof value !== 'undefined') {
                if (typeof value.parameterName === 'string' && Array.isArray(value.values)) {
                    const joinKeyword = `&${value.parameterName}[]=`;
                    const values = value.values.map((val) => encodeURIComponent(val)).join(joinKeyword);
                    const result = `${joinKeyword}${values}`;
                    endpoint = endpoint.replace(`{${key}}`, result);
                }
                else {
                    endpoint = endpoint.replace(`{${key}}`, encodeURIComponent(value));
                }
            }
        }
        return endpoint;
    }
    PricesParameters(forCurrency) {
        let selectedCurrency = forCurrency;
        if (typeof selectedCurrency === 'undefined') {
            selectedCurrency = this.Options.Currency;
        }
        return {
            CURRENCY_CODE: selectedCurrency
        };
    }
    TradeRequestTakeParameters(apiKey, botId) {
        return {
            SECRET_KEY: typeof apiKey === 'undefined' ? this.Options.ApiKey : apiKey,
            BOT_ID: botId
        };
    }
    TradeRequestGiveParameters(apiKey) {
        return {
            SECRET_KEY: typeof apiKey === 'undefined' ? this.Options.ApiKey : apiKey
        };
    }
    TradeRequestGiveP2PParameters(apiKey) {
        return {
            SECRET_KEY: typeof apiKey === 'undefined' ? this.Options.ApiKey : apiKey
        };
    }
    TradeRequestGiveP2PAllParameters(apiKey) {
        return {
            SECRET_KEY: typeof apiKey === 'undefined' ? this.Options.ApiKey : apiKey
        };
    }
    PingParameters(apiKey) {
        return {
            SECRET_KEY: typeof apiKey === 'undefined' ? this.Options.ApiKey : apiKey
        };
    }
    MyInventoryParameters(apiKey) {
        return {
            SECRET_KEY: typeof apiKey === 'undefined' ? this.Options.ApiKey : apiKey
        };
    }
    AddToSaleParameters(itemId, price, currency, apiKey) {
        return {
            ITEM_ID: itemId,
            PRICE: price,
            SECRET_KEY: typeof apiKey === 'undefined' ? this.Options.ApiKey : apiKey,
            CURRENCY_CODE: typeof currency === 'undefined' ? this.Options.Currency : currency
        };
    }
    SetPriceParameters(itemId, price, currency, apiKey) {
        return {
            ITEM_ID: itemId,
            PRICE: price,
            SECRET_KEY: typeof apiKey === 'undefined' ? this.Options.ApiKey : apiKey,
            CURRENCY_CODE: typeof currency === 'undefined' ? this.Options.Currency : currency
        };
    }
    RemoveAllFromSaleParameters(apiKey) {
        return {
            SECRET_KEY: typeof apiKey === 'undefined' ? this.Options.ApiKey : apiKey
        };
    }
    ItemsParameters(apiKey) {
        return {
            SECRET_KEY: typeof apiKey === 'undefined' ? this.Options.ApiKey : apiKey
        };
    }
    TradesParameters(apiKey) {
        return {
            SECRET_KEY: typeof apiKey === 'undefined' ? this.Options.ApiKey : apiKey
        };
    }
    BuyParameters(hashNameOrId, price, sendTo, customId, currency, apiKey) {
        return {
            ITEM_ID: hashNameOrId,
            PRICE: price,
            SECRET_KEY: typeof apiKey === 'undefined' ? this.Options.ApiKey : apiKey,
            CURRENCY_CODE: typeof currency === 'undefined' ? this.Options.Currency : currency,
            PARTNER: sendTo.Partner,
            TOKEN: sendTo.Token,
            CUSTOM_ID: customId
        };
    }
    GetBuyInfoByCustomIdParameters(customId, apiKey) {
        return {
            CUSTOM_ID: customId,
            SECRET_KEY: typeof apiKey === 'undefined' ? this.Options.ApiKey : apiKey
        };
    }
    GetListBuyInfoByCustomIdParameters(customIds, apiKey) {
        return {
            SECRET_KEY: typeof apiKey === 'undefined' ? this.Options.ApiKey : apiKey,
            CUSTOM_IDS: {
                parameterName: 'custom_id',
                values: customIds
            }
        };
    }
    HistoryParameters(startDate, endDate, apiKey) {
        const start = startDate instanceof Date ? startDate.getTime() : startDate;
        let end = new Date().getTime();
        if (typeof endDate !== 'undefined') {
            end = endDate instanceof Date ? endDate.getTime() : endDate;
        }
        return {
            SECRET_KEY: typeof apiKey === 'undefined' ? this.Options.ApiKey : apiKey,
            START_DATE: start,
            END_DATE: end
        };
    }
    GetMoneyParameters(currency, apiKey) {
        let selectedCurrency = currency;
        if (typeof selectedCurrency === 'undefined') {
            selectedCurrency = this.Options.Currency;
        }
        return {
            SECRET_KEY: typeof apiKey === 'undefined' ? this.Options.ApiKey : apiKey,
            CURRENCY_CODE: selectedCurrency
        };
    }
    GoOfflineParameters(apiKey) {
        return {
            SECRET_KEY: typeof apiKey === 'undefined' ? this.Options.ApiKey : apiKey
        };
    }
    UpdateInventoryParameters(apiKey) {
        return {
            SECRET_KEY: typeof apiKey === 'undefined' ? this.Options.ApiKey : apiKey
        };
    }
    TransferDiscountsParameters(toSecret, apiKey) {
        return {
            SECRET_KEY: typeof apiKey === 'undefined' ? this.Options.ApiKey : apiKey,
            TO_SECRET_KEY: toSecret
        };
    }
    GetMySteamIdParameters(apiKey) {
        return {
            SECRET_KEY: typeof apiKey === 'undefined' ? this.Options.ApiKey : apiKey
        };
    }
    SearchItemByHashNameParameters(hashName, currency, apiKey) {
        let selectedCurrency = currency;
        if (typeof selectedCurrency === 'undefined') {
            selectedCurrency = this.Options.Currency;
        }
        return {
            MARKET_HASH_NAME: hashName,
            CURRENCY_CODE: selectedCurrency,
            SECRET_KEY: typeof apiKey === 'undefined' ? this.Options.ApiKey : apiKey
        };
    }
    SearchItemByHashNameSpesificParameters(hashName, currency, apiKey) {
        let selectedCurrency = currency;
        if (typeof selectedCurrency === 'undefined') {
            selectedCurrency = this.Options.Currency;
        }
        return {
            MARKET_HASH_NAME: hashName,
            CURRENCY_CODE: selectedCurrency,
            SECRET_KEY: typeof apiKey === 'undefined' ? this.Options.ApiKey : apiKey
        };
    }
    SearchListItemsByHashNameAllParameters(hashNames, currency, apiKey) {
        let selectedCurrency = currency;
        if (typeof selectedCurrency === 'undefined') {
            selectedCurrency = this.Options.Currency;
        }
        return {
            MARKET_HASH_NAMES: {
                parameterName: 'list_hash_name',
                values: hashNames
            },
            CURRENCY_CODE: selectedCurrency,
            SECRET_KEY: typeof apiKey === 'undefined' ? this.Options.ApiKey : apiKey
        };
    }
    GetListItemsInfoParameters(hashNames, currency, apiKey) {
        let selectedCurrency = currency;
        if (typeof selectedCurrency === 'undefined') {
            selectedCurrency = this.Options.Currency;
        }
        return {
            MARKET_HASH_NAMES: {
                parameterName: 'list_hash_name',
                values: hashNames
            },
            CURRENCY_CODE: selectedCurrency,
            SECRET_KEY: typeof apiKey === 'undefined' ? this.Options.ApiKey : apiKey
        };
    }
    TestParameters(apiKey) {
        return {
            SECRET_KEY: typeof apiKey === 'undefined' ? this.Options.ApiKey : apiKey
        };
    }
    Prices(withClassAndInstance, forCurrency) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const endpointUrl = withClassAndInstance ? Endpoints_1.Endpoints.PricesWithClassAndInstances : Endpoints_1.Endpoints.Prices;
            const params = this.PricesParameters(forCurrency);
            return yield this.CallAxios(endpointUrl, params, false);
        });
    }
    TradeRequestTake(botId, apiKey) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const endpointUrl = typeof botId === 'undefined' ? Endpoints_1.Endpoints.TradeRequestTake : Endpoints_1.Endpoints.TradeRequestTakeWithBotId;
            const params = this.TradeRequestTakeParameters(botId, apiKey);
            return yield this.CallAxios(endpointUrl, params);
        });
    }
    TradeRequestGive(apiKey) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const params = this.TradeRequestGiveParameters(apiKey);
            return yield this.CallAxios(Endpoints_1.Endpoints.TradeRequestGive, params);
        });
    }
    TradeRequestGiveP2P(apiKey) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const params = this.TradeRequestGiveP2PParameters(apiKey);
            return yield this.CallAxios(Endpoints_1.Endpoints.TradeRequestGiveP2P, params);
        });
    }
    TradeRequestGiveP2PAll(apiKey) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const params = this.TradeRequestGiveP2PAllParameters(apiKey);
            return yield this.CallAxios(Endpoints_1.Endpoints.TradeRequestGiveP2PAll, params);
        });
    }
    Ping(apiKey) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const params = this.PingParameters(apiKey);
            return yield this.CallAxios(Endpoints_1.Endpoints.Ping, params);
        });
    }
    MyInventory(apiKey) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const params = this.MyInventoryParameters(apiKey);
            return yield this.CallAxios(Endpoints_1.Endpoints.MyInventory, params);
        });
    }
    AddToSale(itemId, price, currency, apiKey) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const params = this.AddToSaleParameters(itemId, price, currency, apiKey);
            return yield this.CallAxios(Endpoints_1.Endpoints.AddToSale, params);
        });
    }
    SetPrice(itemId, price, currency, apiKey) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const params = this.SetPriceParameters(itemId, price, currency, apiKey);
            return yield this.CallAxios(Endpoints_1.Endpoints.SetPrice, params);
        });
    }
    RemoveAllFromSale(apiKey) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const params = this.RemoveAllFromSaleParameters(apiKey);
            return yield this.CallAxios(Endpoints_1.Endpoints.RemoveAllFromSale, params);
        });
    }
    Items(apiKey) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const params = this.ItemsParameters(apiKey);
            return yield this.CallAxios(Endpoints_1.Endpoints.Items, params);
        });
    }
    Trades(apiKey) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const params = this.TradesParameters(apiKey);
            return yield this.CallAxios(Endpoints_1.Endpoints.Trades, params);
        });
    }
    TradesExtended(apiKey) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const params = this.TradesParameters(apiKey);
            return yield this.CallAxios(Endpoints_1.Endpoints.TradesExtended, params);
        });
    }
    Buy(hashNameOrId, price, sendTo, customId, currency, apiKey) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const tradeObj = Utils_1.Utils.GetTradeObject(sendTo);
            let hasHashName = Utils_1.Utils.IsStringMarketHashName(hashNameOrId);
            let hasCustomId = typeof customId !== 'undefined';
            const sendToOther = typeof tradeObj.Token !== 'undefined';
            let endpointUrl;
            if (hasHashName) {
                if (hasCustomId) {
                    if (sendToOther) {
                        endpointUrl = Endpoints_1.Endpoints.BuyForWithMarketHashNameAndCustomId;
                    }
                    else {
                        endpointUrl = Endpoints_1.Endpoints.BuyWithMarketHashNameAndCustomId;
                    }
                }
                else {
                    if (sendToOther) {
                        endpointUrl = Endpoints_1.Endpoints.BuyForWithMarketHashName;
                    }
                    else {
                        endpointUrl = Endpoints_1.Endpoints.BuyWithMarketHashName;
                    }
                }
            }
            else {
                if (hasCustomId) {
                    if (sendToOther) {
                        endpointUrl = Endpoints_1.Endpoints.BuyForWithItemIdAndCustomId;
                    }
                    else {
                        endpointUrl = Endpoints_1.Endpoints.BuyWithItemIdAndCustomId;
                    }
                }
                else {
                    if (sendToOther) {
                        endpointUrl = Endpoints_1.Endpoints.BuyForWithItemId;
                    }
                    else {
                        endpointUrl = Endpoints_1.Endpoints.BuyWithItemId;
                    }
                }
            }
            const params = this.BuyParameters(hashNameOrId, price, tradeObj, customId, currency, apiKey);
            return yield this.CallAxios(endpointUrl, params);
        });
    }
    GetBuyInfoByCustomId(customId, apiKey) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const params = this.GetBuyInfoByCustomIdParameters(customId, apiKey);
            return yield this.CallAxios(Endpoints_1.Endpoints.GetBuyInfoByCustomId, params);
        });
    }
    GetListBuyInfoByCustomId(customIds, apiKey) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const params = this.GetListBuyInfoByCustomIdParameters(customIds, apiKey);
            return yield this.CallAxios(Endpoints_1.Endpoints.GetListBuyInfoByCustomId, params);
        });
    }
    History(startDate, endDate, apiKey) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const endpointUrl = typeof endDate === 'undefined' ? Endpoints_1.Endpoints.History : Endpoints_1.Endpoints.HistoryWithEndDate;
            const params = this.HistoryParameters(startDate, endDate, apiKey);
            return yield this.CallAxios(endpointUrl, params);
        });
    }
    GetMoney(currency, apiKey) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const params = this.GetMoneyParameters(currency, apiKey);
            return yield this.CallAxios(Endpoints_1.Endpoints.GetMoney, params);
        });
    }
    GoOffline(apiKey) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const params = this.GoOfflineParameters(apiKey);
            return yield this.CallAxios(Endpoints_1.Endpoints.GoOffline, params);
        });
    }
    UpdateInventory(apiKey) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const params = this.UpdateInventoryParameters(apiKey);
            return yield this.CallAxios(Endpoints_1.Endpoints.UpdateInventory, params);
        });
    }
    TransferDiscounts(toSecret, apiKey) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const params = this.TransferDiscountsParameters(toSecret, apiKey);
            return yield this.CallAxios(Endpoints_1.Endpoints.TransferDiscounts, params);
        });
    }
    GetMySteamId(apiKey) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const params = this.GetMySteamIdParameters(apiKey);
            return yield this.CallAxios(Endpoints_1.Endpoints.GetMySteamId, params);
        });
    }
    SearchItemByHashName(hashName, currency, apiKey) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const params = this.SearchItemByHashNameParameters(hashName, currency, apiKey);
            return yield this.CallAxios(Endpoints_1.Endpoints.SearchItemByHashName, params);
        });
    }
    SearchItemByHashNameSpesific(hashName, currency, apiKey) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const params = this.SearchItemByHashNameSpesificParameters(hashName, currency, apiKey);
            return yield this.CallAxios(Endpoints_1.Endpoints.SearchItemByHashNameSpesific, params);
        });
    }
    SearchListItemsByHashNameAll(hashNames, currency, apiKey) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const params = this.SearchListItemsByHashNameAllParameters(hashNames, currency, apiKey);
            return yield this.CallAxios(Endpoints_1.Endpoints.SearchListItemsByHashNameAll, params);
        });
    }
    GetListItemsInfo(hashNames, currency, apiKey) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const params = this.GetListItemsInfoParameters(hashNames, currency, apiKey);
            return yield this.CallAxios(Endpoints_1.Endpoints.GetListItemsInfo, params);
        });
    }
    Test(apiKey) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const params = this.TestParameters(apiKey);
            return yield this.CallAxios(Endpoints_1.Endpoints.Test, params);
        });
    }
}
exports.MarketCsgo = MarketCsgo;

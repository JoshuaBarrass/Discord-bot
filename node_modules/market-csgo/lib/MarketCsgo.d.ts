import { MarketCsgoOptions } from "./declarations/MarketCsgoOptions";
import { PricesResponse } from "./declarations/responses/PricesResponse";
import { EnumCurrency } from "./declarations/enums/EnumCurrency";
import { TradeRequestTakeResponse } from "./declarations/responses/TradeRequestTakeResponse";
import { TradeRequestGiveResponse } from "./declarations/responses/TradeRequestGiveResponse";
import { TradeRequestGiveP2PResponse } from "./declarations/responses/TradeRequestGiveP2PResponse";
import { TradeRequestGiveP2PAllResponse } from "./declarations/responses/TradeRequestGiveP2PAllResponse";
import { PingResponse } from "./declarations/responses/PingResponse";
import { MyInventoryResponse } from "./declarations/responses/MyInventoryResponse";
import { AddToSaleResponse } from "./declarations/responses/AddToSaleResponse";
import { SetPriceResponse } from "./declarations/responses/SetPriceResponse";
import { RemoveAllFromSaleResponse } from "./declarations/responses/RemoveAllFromSaleResponse";
import { ItemsResponse } from "./declarations/responses/ItemsResponse";
import { TradesResponse } from "./declarations/responses/TradesResponse";
import { TradesExtendedResponse } from "./declarations/responses/TradesExtendedResponse";
import { BuyResponse } from "./declarations/responses/BuyResponse";
import { ITradeLink } from "./declarations/TradeLink";
import { UtilsClass } from "./Utils";
import { GetBuyInfoByCustomIdResponse } from "./declarations/responses/GetBuyInfoByCustomIdResponse";
import { GetListBuyInfoByCustomIdResponse } from "./declarations/responses/GetListBuyInfoByCustomIdResponse";
import { HistoryResponse } from "./declarations/responses/HistoryResponse";
import { GetMoneyResponse } from "./declarations/responses/GetMoneyResponse";
import { GoOfflineResponse } from "./declarations/responses/GoOfflineResponse";
import { UpdateInventoryResponse } from "./declarations/responses/UpdateInventoryResponse";
import { TransferDiscountsResponse } from "./declarations/responses/TransferDiscountsResponse";
import { GetMySteamIdResponse } from "./declarations/responses/GetMySteamIdResponse";
import { SearchItemByHashNameResponse } from "./declarations/responses/SearchItemByHashNameResponse";
import { SearchItemByHashNameSpesificResponse } from "./declarations/responses/SearchItemByHashNameSpesificResponse";
import { SearchListItemsByHashNameAllResponse } from "./declarations/responses/SearchListItemsByHashNameAllResponse";
import { GetListItemsInfoResponse } from "./declarations/responses/GetListItemsInfoResponse";
import { TestResponse } from "./declarations/responses/TestResponse";
import { PricesWithClassAndInstancesResponse } from "./declarations/responses/PricesWithClassAndInstancesResponse";
export declare class MarketCsgo {
    private Options;
    private RateLimitedAxios;
    private UnlimitedAxios;
    Utils: UtilsClass;
    constructor(options: Partial<MarketCsgoOptions>);
    SetOptionsAndReinitialize(options: Partial<MarketCsgoOptions>): void;
    private CreateRateLimitedAxios;
    private CreateUnlimitedAxios;
    private CallAxios;
    private CheckErrors;
    private ConfigureEndpoint;
    private PricesParameters;
    private TradeRequestTakeParameters;
    private TradeRequestGiveParameters;
    private TradeRequestGiveP2PParameters;
    private TradeRequestGiveP2PAllParameters;
    private PingParameters;
    private MyInventoryParameters;
    private AddToSaleParameters;
    private SetPriceParameters;
    private RemoveAllFromSaleParameters;
    private ItemsParameters;
    private TradesParameters;
    private BuyParameters;
    private GetBuyInfoByCustomIdParameters;
    private GetListBuyInfoByCustomIdParameters;
    private HistoryParameters;
    private GetMoneyParameters;
    private GoOfflineParameters;
    private UpdateInventoryParameters;
    private TransferDiscountsParameters;
    private GetMySteamIdParameters;
    private SearchItemByHashNameParameters;
    private SearchItemByHashNameSpesificParameters;
    private SearchListItemsByHashNameAllParameters;
    private GetListItemsInfoParameters;
    private TestParameters;
    Prices(): Promise<PricesResponse>;
    Prices(withClassAndInstance: true): Promise<PricesWithClassAndInstancesResponse>;
    Prices(withClassAndInstance: false): Promise<PricesResponse>;
    Prices(withClassAndInstance: true, forCurrency?: EnumCurrency): Promise<PricesWithClassAndInstancesResponse>;
    Prices(withClassAndInstance: false, forCurrency?: EnumCurrency): Promise<PricesResponse>;
    TradeRequestTake(botId?: string, apiKey?: string): Promise<TradeRequestTakeResponse>;
    TradeRequestGive(apiKey?: string): Promise<TradeRequestGiveResponse>;
    TradeRequestGiveP2P(apiKey?: string): Promise<TradeRequestGiveP2PResponse>;
    TradeRequestGiveP2PAll(apiKey?: string): Promise<TradeRequestGiveP2PAllResponse>;
    Ping(apiKey?: string): Promise<PingResponse>;
    MyInventory(apiKey?: string): Promise<MyInventoryResponse>;
    AddToSale(itemId: string, price: number, currency?: EnumCurrency, apiKey?: string): Promise<AddToSaleResponse>;
    SetPrice(itemId: string, price: number, currency?: EnumCurrency, apiKey?: string): Promise<SetPriceResponse>;
    RemoveAllFromSale(apiKey?: string): Promise<RemoveAllFromSaleResponse>;
    Items(apiKey?: string): Promise<ItemsResponse>;
    Trades(apiKey?: string): Promise<TradesResponse>;
    TradesExtended(apiKey?: string): Promise<TradesExtendedResponse>;
    Buy(hashNameOrId: string, price: number, sendTo: null | string | ITradeLink, customId?: string, currency?: EnumCurrency, apiKey?: string): Promise<BuyResponse>;
    GetBuyInfoByCustomId(customId: string, apiKey?: string): Promise<GetBuyInfoByCustomIdResponse>;
    GetListBuyInfoByCustomId(customIds: string[], apiKey?: string): Promise<GetListBuyInfoByCustomIdResponse>;
    History(startDate: Date | number, endDate?: Date | number, apiKey?: string): Promise<HistoryResponse>;
    GetMoney(currency?: EnumCurrency, apiKey?: string): Promise<GetMoneyResponse>;
    GoOffline(apiKey?: string): Promise<GoOfflineResponse>;
    UpdateInventory(apiKey?: string): Promise<UpdateInventoryResponse>;
    TransferDiscounts(toSecret: string, apiKey?: string): Promise<TransferDiscountsResponse>;
    GetMySteamId(apiKey?: string): Promise<GetMySteamIdResponse>;
    SearchItemByHashName(hashName: string, currency?: EnumCurrency, apiKey?: string): Promise<SearchItemByHashNameResponse>;
    SearchItemByHashNameSpesific(hashName: string, currency?: EnumCurrency, apiKey?: string): Promise<SearchItemByHashNameSpesificResponse>;
    SearchListItemsByHashNameAll(hashNames: string[], currency?: EnumCurrency, apiKey?: string): Promise<SearchListItemsByHashNameAllResponse>;
    GetListItemsInfo(hashNames: string[], currency?: EnumCurrency, apiKey?: string): Promise<GetListItemsInfoResponse>;
    Test(apiKey?: string): Promise<TestResponse>;
}
//# sourceMappingURL=MarketCsgo.d.ts.map